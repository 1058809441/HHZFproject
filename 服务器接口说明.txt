在客户端web的src-Util文件夹中，封装了axios的网络请求的功能，使用如下：
1、在进行网络请求的文件中引入 connection 文件：
	import Connection from "../Utils/connection"

2、使用样例参考  platform-src-views-ShowUser.js  的 53行 到 84行




客户端访问的服务器接口及说明：
1、获取全部商品：
app.get('/products', 
返回的数据：包含所有商品的数组


2、登录
app.post('/login',
请求的数据格式：{ checkName: "用户名" , pass: "密码" }
返回数据：登陆成功：
		{ username: "用户名" , ifLogin: true , shoppingCar: [包含该用户所有购物车信息的数组] , allMessage : [包含所有动态信息的数组] , myMessage : [包含该用户动态的数组] }

	登陆失败：{ username: "用户名" , ifLogin: false , shoppingCar: [ 空数组 ]，myMessage : [空数组] }


3、注册
app.post('/register',
请求的数据格式：{ checkName: "用户名" , pass: "密码" }
返回数据：
	注册成功：
{ username: "用户名" , ifLogin: true , shoppingCar: [ 空数组 ]  , allMessage : [包含所有动态信息的数组] , myMessage : [空数组，因为刚刚创建所以还没有动态]  }
	注册失败：
{ username: 空字符串 , ifLogin: false , shoppingCar: [ 空数组 ]  , allMessage : [空数组] , myMessage : [空数组] }


5、个人中心获取用户自己的订单信息
app.post('/UserOrder',
请求数据的格式：{ username:"用户名" }
返回数据：[ 该用户的所有订单数据的数组 { orderID：数字 ， username：“用户名”，productName：“1/2/3”，productCount：“1/1/1”，orderMoney：数字，orderTime“2019/9/17-13:30:00” } ，{ }，{ } ...... ]


6、获取轮播图的地址
app.get('/lunbo',
返回数据：[ 包含所有轮播图的数组 { id:  , src:  } ]


7、增减商品到购物车
<<<<<<< HEAD
注释1：两种商品（预定课程course、健身用品tool），当发生购物车增减操作时，判断商品种类，除了tool，其它的数量只能为1
=======
注释1：四种商品（健身用品tool、健身套餐card），当发生购物车增减操作时，判断商品种类，除了tool，其它的数量只能为1
>>>>>>> hm的更新9.22
注释2：商品详情页只能  将原来购物车中没有的商品新加入购物车  或者  将原本购物车中商品的数量增加 1 
注释3：购物车页 可以增加或者减少已有的商品，通过判断种类，使得除了tool以外其他商品都只能为1
注释4：锁定购物车的商品数量不能小于1，删除只能点击删除按钮
app.post('/UpdateShoppingCar',
请求数据格式：
{ tag：数字 1 是增加数字 -1 是减少， username，productID，productName，productPrice，productType，productImg }




8、在购物车页面点击 删除 按钮（后台删除数据库里面的数据，同时前端删除仓库里的这条数据）
app.post('/DeleteFromShoppingCar',
请求数据的格式：
{ username，productID }



9、点击下单按钮 （后台更新用户表、购物车表，并重新返回用户信息，前端收到返回数据后操作仓库数据：清空购物车数据、根据新的用户数据修改仓库里的用户信息）
app.post('/AddOrder',
请求数据的格式：
{ username }
返回数据的格式：
{
orderCount:  新的用户订单数,
orderSpent:  新的用户消费总额,
username:  用户名
}


10、获取我的动态
app.post('/MyMessage',
请求数据的格式：{ username：用户名 }
返回数据的格式：{ myMessage：我的动态的数组 }


11、获取全部的动态
app.get('/AllMessage',
请求数据的格式：{ username：用户名 }
返回数据的格式：{ allMessage：全部动态的数组 }


12、点击发动态按钮
app.post('/AddMessage',
请求数据的格式：
{ username：用户名字符串，content：内容字符串 }
返回数据的格式：
{ myMessage：新的我的动态的数组，allMessage：新的全部动态的数组 }




